def example_usage():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô learning system"""
    
    from universal_field_extractor import SmartFieldExtractor
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á extractor (‡∏à‡∏∞‡∏°‡∏µ learning ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
    extractor = SmartFieldExtractor()
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    sample_data = {
        "alert_info": {
            "alert_title": "Suspicious Login Detected",
            "risk_level": "High",
            "event_timestamp": "2024-01-15T10:30:00Z"
        },
        "source_host": {
            "computer_name": "SERVER-01",
            "ip_addr": "10.0.1.50"
        },
        "account_info": {
            "username": "admin@company.com"
        }
    }
    
    print("üîç Processing with learning...")
    
    # Extract ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    results = extractor.extract_all_fields(sample_data, "security_event")
    
    print(f"\nüìä Results:")
    for field_name, result in results.items():
        if result.value:
            confidence = getattr(result, 'confidence', 0)
            method = getattr(result, 'method', 'unknown')
            print(f"   {field_name}: {result.value}")
            print(f"      ‚îî‚îÄ Source: {result.source_path} ({method}, {confidence:.2f})")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
    print(f"\nüß† Learning Progress:")
    extractor.show_learning_stats()
    
    # Process ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà 2 (‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å)
    sample_data_2 = {
        "alert_info": {
            "alert_title": "Malware Execution",
            "risk_level": "Critical"
        },
        "source_host": {
            "computer_name": "WORKSTATION-05"
        }
    }
    
    print(f"\nüîç Processing second file (with learned knowledge)...")
    results_2 = extractor.extract_all_fields(sample_data_2, "security_event")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ learning ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á
    for field_name, result in results_2.items():
        if hasattr(result, 'method') and 'learning' in result.method:
            print(f"üß† Learning helped: {field_name} = {result.value}")

if __name__ == "__main__":
    example_usage()